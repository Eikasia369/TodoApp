{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","onClick","placeholder","onChange","name","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA8DeA,MA5Df,SAAkBC,GAEd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAGb,OACI,sBAAMiB,UAAU,YAAYC,QAAST,EAArC,SACKd,EAAME,KACP,qCACA,uBACEsB,YAAY,mBACZrB,MAAOC,EACPqB,SAAUd,EACVe,KAAK,OACLC,IAAKrB,EACLgB,UAAU,oBAEZ,wBAAQC,QAAST,EAAcQ,UAAU,mBAAzC,2BAKF,qCACE,uBACEE,YAAY,oBACZrB,MAAOC,EACPqB,SAAUd,EACVe,KAAK,OACLJ,UAAU,aACVK,IAAKrB,IAEP,wBAAQiB,QAAST,EAAcQ,UAAU,cAAzC,2B,eCVGM,MAtCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAE5C,EAAwB/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACJhB,GAAI,KACJd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKd,UAAWa,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBd,QAAS,kBAAMO,EAAaK,EAAKlB,KAApD,SACKkB,EAAKd,MADAc,EAAKlB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACAC,QAAS,kBAAMQ,EAAWI,EAAKlB,KAC/BK,UAAU,gBAEV,cAAC,IAAD,CACAC,QAAS,kBAAMU,EAAQ,CAAChB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QACjDC,UAAU,mBAXuDc,OC+BlEE,MApDf,WAEI,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAqCA,OACI,gCACI,6DACA,cAAC,EAAD,CAAUvB,SAtCF,SAAAmB,GACZ,GAAKA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAApC,CAIA,IAAMoB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OAgCL,cAAC,EAAD,CACAZ,MAAOA,EACPC,aAhBa,SAAAb,GACjB,IAAIyB,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IAULX,WAxBW,SAAAd,GACf,IAAM0B,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKlB,KAAOA,KAExDsB,EAASI,IAsBLX,WAjCW,SAACa,EAAQC,GACnBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCZ5DC,MARf,WACE,OACE,qBAAK3B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.82f22136.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '')\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"todo-form\" onClick={handleSubmit}>\r\n            {props.edit ? (\r\n            <>\r\n            <input\r\n              placeholder='Actualizar tarea'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              ref={inputRef}\r\n              className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n              Actualizar\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              placeholder='Agregar una tarea'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              className='todo-input'\r\n              ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n              Agregar\r\n            </button>\r\n          </>\r\n        )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine \r\n                onClick={() => removeTodo(todo.id)}\r\n                className=\"delete-icon\"\r\n                />\r\n                <TiEdit \r\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                className=\"edit-icon\"\r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n          }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr)\r\n    }\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Que planes tienes para hoy?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo \r\n            todos={todos} \r\n            completeTodo={completeTodo} \r\n            removeTodo={removeTodo} \r\n            updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}